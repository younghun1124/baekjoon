{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "장치의 최종 속력: 0.00 m/s\n",
      "페달이 최상단에서 최하단까지 내려가는 시간: 0.00 초\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\young\\AppData\\Local\\Temp\\ipykernel_20572\\599182253.py:108: UserWarning: Glyph 49884 (\\N{HANGUL SYLLABLE SI}) missing from current font.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\young\\AppData\\Local\\Temp\\ipykernel_20572\\599182253.py:108: UserWarning: Glyph 44036 (\\N{HANGUL SYLLABLE GAN}) missing from current font.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\young\\AppData\\Local\\Temp\\ipykernel_20572\\599182253.py:108: UserWarning: Glyph 49549 (\\N{HANGUL SYLLABLE SOG}) missing from current font.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\young\\AppData\\Local\\Temp\\ipykernel_20572\\599182253.py:108: UserWarning: Glyph 46020 (\\N{HANGUL SYLLABLE DO}) missing from current font.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\young\\AppData\\Local\\Temp\\ipykernel_20572\\599182253.py:108: UserWarning: Glyph 50640 (\\N{HANGUL SYLLABLE E}) missing from current font.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\young\\AppData\\Local\\Temp\\ipykernel_20572\\599182253.py:108: UserWarning: Glyph 46384 (\\N{HANGUL SYLLABLE DDA}) missing from current font.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\young\\AppData\\Local\\Temp\\ipykernel_20572\\599182253.py:108: UserWarning: Glyph 47480 (\\N{HANGUL SYLLABLE REUN}) missing from current font.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\young\\AppData\\Local\\Temp\\ipykernel_20572\\599182253.py:108: UserWarning: Glyph 48320 (\\N{HANGUL SYLLABLE BYEON}) missing from current font.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\young\\AppData\\Local\\Temp\\ipykernel_20572\\599182253.py:108: UserWarning: Glyph 54868 (\\N{HANGUL SYLLABLE HWA}) missing from current font.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\young\\AppData\\Local\\Temp\\ipykernel_20572\\599182253.py:108: UserWarning: Glyph 54168 (\\N{HANGUL SYLLABLE PE}) missing from current font.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\young\\AppData\\Local\\Temp\\ipykernel_20572\\599182253.py:108: UserWarning: Glyph 45804 (\\N{HANGUL SYLLABLE DAL}) missing from current font.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\young\\AppData\\Local\\Temp\\ipykernel_20572\\599182253.py:108: UserWarning: Glyph 44033 (\\N{HANGUL SYLLABLE GAG}) missing from current font.\n",
      "  plt.tight_layout()\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# 사용자 초기값 설정\n",
    "m = 80.0          # 사람의 질량 (kg)\n",
    "m_device = 1.0    # 장치의 질량 (kg)\n",
    "M_total = m + m_device  # 총 질량 (kg)\n",
    "h = 0.05          # 수직 이동 거리 (m)\n",
    "C_r = 0.015       # 구름저항 계수\n",
    "rho = 1.2         # 공기 밀도 (kg/m^3)\n",
    "C_d = 1.0         # 공기저항 계수\n",
    "A = 0.5           # 단면적 (m^2)\n",
    "g = 9.8           # 중력 가속도 (m/s^2)\n",
    "gear_ratio = 5.0  # 기어비 (5:1)\n",
    "r_wheel = 0.03     # 바퀴 반지름 (m)\n",
    "r_pedal = 0.03    # 페달 암의 길이 (m)\n",
    "m_crank = 2.0     # 크랭크와 페달의 질량 (kg)\n",
    "I_crank = m_crank * r_pedal**2  # 크랭크의 관성 모멘트 (kg·m^2)\n",
    "\n",
    "# 최대 페달 각도 계산\n",
    "theta_pedal_max = np.arccos(1 - (h / (r_pedal*2)))\n",
    "\n",
    "# 시간 설정\n",
    "dt = 0.001         # 시간 간격 (s)\n",
    "t_total = 2.0      # 총 시뮬레이션 시간 (s)\n",
    "time_steps = int(t_total / dt)\n",
    "t = np.linspace(0, t_total, time_steps)\n",
    "\n",
    "# 초기값 설정\n",
    "v = np.zeros(time_steps)             # 속도 배열\n",
    "x = np.zeros(time_steps)             # 위치 배열\n",
    "theta_pedal = np.zeros(time_steps)   # 페달 각도 배열\n",
    "omega_pedal = np.zeros(time_steps)   # 페달 각속도 배열\n",
    "\n",
    "# 페달 초기 각도 설정 (아주 작은 값으로 시작)\n",
    "theta_pedal[0] = 1e-6  # 라디안 단위\n",
    "\n",
    "# 시뮬레이션 시작\n",
    "for i in range(1, time_steps):\n",
    "    if theta_pedal[i-1] < theta_pedal_max:\n",
    "        # 페달을 밟는 동안\n",
    "        # 현재 각도에서 토크 계산\n",
    "        tau_pedal = m * g * r_pedal * np.sin(theta_pedal[i-1])\n",
    "        # 각가속도 계산\n",
    "        alpha = tau_pedal / I_crank\n",
    "        # 각속도 업데이트\n",
    "        omega_pedal[i] = omega_pedal[i-1] + alpha * dt\n",
    "        # 각도 업데이트\n",
    "        theta_pedal[i] = theta_pedal[i-1] + omega_pedal[i] * dt\n",
    "        if theta_pedal[i] >= theta_pedal_max:\n",
    "            theta_pedal[i] = theta_pedal_max\n",
    "            omega_pedal[i] = 0.0\n",
    "        # 뒷바퀴로 전달된 토크 (기어비 고려)\n",
    "        tau_wheel = tau_pedal / gear_ratio\n",
    "        # 뒷바퀴에 의한 추진력\n",
    "        F_drive = tau_wheel / r_wheel\n",
    "    else:\n",
    "        # 페달 밟기가 끝난 후\n",
    "        omega_pedal[i] = 0.0\n",
    "        theta_pedal[i] = theta_pedal_max\n",
    "        F_drive = 0.0\n",
    "\n",
    "    # 저항력 계산\n",
    "    F_roll = C_r * M_total * g\n",
    "    F_air = 0.5 * C_d * rho * A * v[i-1]**2\n",
    "    F_total = F_roll + F_air\n",
    "\n",
    "    # 가속도 계산\n",
    "    a = (F_drive - F_total) / M_total\n",
    "\n",
    "    # 속도 업데이트\n",
    "    v[i] = v[i-1] + a * dt\n",
    "    if v[i] < 0:\n",
    "        v[i] = 0.0\n",
    "\n",
    "    # 위치 업데이트\n",
    "    x[i] = x[i-1] + v[i] * dt\n",
    "\n",
    "# 최종 속도\n",
    "v_final = v[-1]\n",
    "\n",
    "# 페달 내려가는 시간 계산\n",
    "t_pedal_index = np.argmax(theta_pedal >= theta_pedal_max)\n",
    "t_pedal = t[t_pedal_index] if t_pedal_index > 0 else 0.0\n",
    "\n",
    "# 결과 출력\n",
    "print(f\"장치의 최종 속력: {v_final:.2f} m/s\")\n",
    "print(f\"페달이 최상단에서 최하단까지 내려가는 시간: {t_pedal:.2f} 초\")\n",
    "\n",
    "# 그래프 그리기\n",
    "plt.figure(figsize=(12,6))\n",
    "\n",
    "# 속도 그래프 그리기\n",
    "plt.subplot(2,1,1)\n",
    "plt.plot(t, v)\n",
    "plt.xlabel('시간 (s)')\n",
    "plt.ylabel('속도 (m/s)')\n",
    "plt.title('시간에 따른 속도 변화')\n",
    "plt.grid()\n",
    "\n",
    "# 페달 각도 그래프 그리기\n",
    "plt.subplot(2,1,2)\n",
    "plt.plot(t, np.rad2deg(theta_pedal))\n",
    "plt.xlabel('시간 (s)')\n",
    "plt.ylabel('페달 각도 (deg)')\n",
    "plt.title('시간에 따른 페달 각도 변화')\n",
    "plt.grid()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
